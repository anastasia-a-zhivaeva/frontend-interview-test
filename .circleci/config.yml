version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.0

executors:
  node-browser:
    docker:
      - image: circleci/node:14-browsers
  node:
    docker:
      - image: circleci/node:lts

jobs:
  lint-and-build:
    executor: node
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Lint
          command: npm run lint
      - run:
          name: Build
          command: npm run build

  unit:
    executor: node-browser
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Test
          command: npm run test:ci

  e2e:
    executor: node-browser
    steps:
      - checkout
      - run:
          name: Install Chrome (can be remove when Chrome in image will be updated)
          command: |
            sudo apt install -y libappindicator3-1
            curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome.deb
            sudo sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox|g' /opt/google/chrome/google-chrome
            rm google-chrome.deb
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Test
          command: npm run e2e

  release:
    executor: node
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: npx semantic-release
      - run: git checkout master
      - run: git merge release
      - run: git push
      - run: git -d -r release

  publish:
    executor: aws-cli/default
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: npm run build
      - aws-cli/setup:
          profile-name: default
      - run: |
          aws s3 rm "s3://${S3_BUCKET_NAME}" --recursive
          aws s3 cp ./dist "s3://${S3_BUCKET_NAME}/" --recursive
          aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"

workflows:
  version: 2
  build-and-test:
    jobs:
      - lint-and-build
      - unit:
          requires:
            - lint-and-build
      - e2e:
          requires:
            - lint-and-build
  semantic-release:
    jobs:
      - release:
          filters:
            branches:
              only: release
          context: GITHUB_TOKEN
  publish-to-cloudfront:
    jobs:
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          context: AWS
